version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: aidevops-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: aidevops123
      MONGO_INITDB_DATABASE: aidevopscompany
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb-init.js:/docker-entrypoint-initdb.d/mongodb-init.js:ro
    networks:
      - aidevops-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: aidevops-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: aidevops123
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - aidevops-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # LLAMA Model Server
  llama:
    image: ollama/ollama:latest
    container_name: aidevops-llama
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    ports:
      - "11434:11434"
    volumes:
      - llama_data:/root/.ollama
      - ./llama/models:/models:ro
    networks:
      - aidevops-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Redis Cache (for session management and caching)
  # redis:
  #   image: redis:7.2-alpine
  #   container_name: aidevops-redis
  #   restart: unless-stopped
  #   command: redis-server --requirepass aidevops123
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - aidevops-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Elasticsearch (for logging and search)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: aidevops-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - aidevops-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kibana (for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: aidevops-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - aidevops-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus (for metrics collection)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: aidevops-prometheus
  #   restart: unless-stopped
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   networks:
  #     - aidevops-network
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Grafana (for metrics visualization)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: aidevops-grafana
  #   restart: unless-stopped
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=aidevops123
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning:/etc/grafana/provisioning:ro
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - aidevops-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # # AI DevOps Company API
  # aidevops-api:
  #   build:
  #     context: .
  #     dockerfile: src/API/AIDevOpsCompany.API/Dockerfile
  #   container_name: aidevops-api
  #   restart: unless-stopped
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Production
  #     - ASPNETCORE_URLS=http://+:8080
  #     - ConnectionStrings__MongoDB=mongodb://admin:aidevops123@mongodb:27017/aidevopscompany?authSource=admin
  #     - ConnectionStrings__RabbitMQ=amqp://admin:aidevops123@rabbitmq:5672/
  #     - ConnectionStrings__Redis=redis:6379
  #     - LlamaSettings__BaseUrl=http://llama:11434
  #     - ElasticsearchSettings__Url=http://elasticsearch:9200
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - mongodb
  #     - rabbitmq
  #     - redis
  #     - llama
  #     - elasticsearch
  #   networks:
  #     - aidevops-network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 60s

volumes:
  mongodb_data:
    driver: local
  rabbitmq_data:
    driver: local
  llama_data:
    driver: local
  # redis_data:
  #   driver: local
  elasticsearch_data:
    driver: local
  # prometheus_data:
  #   driver: local
  # grafana_data:
  #   driver: local

networks:
  aidevops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

